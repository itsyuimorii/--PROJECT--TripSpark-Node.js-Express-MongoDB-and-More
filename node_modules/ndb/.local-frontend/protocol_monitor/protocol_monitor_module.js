self["ProtocolMonitor"]=self["ProtocolMonitor"]||{};ProtocolMonitor.ProtocolMonitor=class extends UI.VBox{constructor(){super(true);this._nodes=[];this._started=false;this._startTime=0;this._nodeForId={};this._filter=(t=>true);this._columns=[{id:"method",title:ls`Method`,visible:true,sortable:true,weight:60},{id:"direction",title:ls`Direction`,visible:false,sortable:true,hideable:true,weight:30},{id:"request",title:ls`Request`,visible:true,hideable:true,weight:60},{id:"response",title:ls`Response`,visible:true,hideable:true,weight:60},{id:"timestamp",title:ls`Timestamp`,visible:false,sortable:true,hideable:true,weight:30}];this.registerRequiredCSS("protocol_monitor/protocolMonitor.css");const t=new UI.Toolbar("protocol-monitor-toolbar",this.contentElement);const e=new UI.ToolbarToggle(ls`Record`,"largeicon-start-recording","largeicon-stop-recording");e.addEventListener(UI.ToolbarButton.Events.Click,()=>{e.setToggled(!e.toggled());this._setRecording(e.toggled())});e.setToggleWithRedColor(true);t.appendToolbarItem(e);e.setToggled(true);const o=new UI.ToolbarButton(ls`Clear all`,"largeicon-clear");o.addEventListener(UI.ToolbarButton.Events.Click,()=>{this._dataGrid.rootNode().removeChildren();this._nodes=[];this._nodeForId={}});t.appendToolbarItem(o);const i=new UI.SplitWidget(true,true,"protocol-monitor-panel-split",250);i.show(this.contentElement);this._dataGrid=new DataGrid.SortableDataGrid(this._columns);this._dataGrid.element.style.flex="1";this._infoWidget=new ProtocolMonitor.ProtocolMonitor.InfoWidget;i.setMainWidget(this._dataGrid.asWidget());i.setSidebarWidget(this._infoWidget);this._dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode,t=>this._infoWidget.render(t.data.data));this._dataGrid.addEventListener(DataGrid.DataGrid.Events.DeselectedNode,t=>this._infoWidget.render(null));this._dataGrid.setHeaderContextMenuCallback(this._innerHeaderContextMenu.bind(this));this._dataGrid.setRowContextMenuCallback(this._innerRowContextMenu.bind(this));this._dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged,this._sortDataGrid.bind(this));this._dataGrid.setStickToBottom(true);this._dataGrid.sortNodes(DataGrid.SortableDataGrid.NumericComparator.bind(null,"timestamp"),false);this._updateColumnVisibility();const s=["method","request","response","direction"];this._filterParser=new TextUtils.FilterParser(s);this._suggestionBuilder=new UI.FilterSuggestionBuilder(s);this._textFilterUI=new UI.ToolbarInput(ls`Filter`,1,.2,"",this._suggestionBuilder.completions.bind(this._suggestionBuilder));this._textFilterUI.addEventListener(UI.ToolbarInput.Event.TextChanged,t=>{const e=t.data;const o=this._filterParser.parse(e);this._filter=(t=>{for(const{key:e,text:i,negative:s}of o){if(!i)continue;const o=e?t.data[e]:t.data;if(!o)continue;const r=JSON.stringify(o).toLowerCase().indexOf(i.toLowerCase())!==-1;if(r===s)return false}return true});this._filterNodes()});t.appendToolbarItem(this._textFilterUI)}_filterNodes(){for(const t of this._nodes){if(this._filter(t)){if(!t.parent)this._dataGrid.insertChild(t)}else{t.remove()}}}_innerHeaderContextMenu(t){const e=this._columns.filter(t=>t.hideable);for(const o of e){t.headerSection().appendCheckboxItem(o.title,this._toggleColumnVisibility.bind(this,o),o.visible)}t.show()}_innerRowContextMenu(t,e){t.defaultSection().appendItem(ls`Filter`,()=>{this._textFilterUI.setValue(`method:${e.data.method}`,true)});t.defaultSection().appendItem(ls`Documentation`,()=>{const[t,o]=e.data.method.split(".");const i=e.data.direction==="sent"?"method":"event";InspectorFrontendHost.openInNewTab(`https://chromedevtools.github.io/devtools-protocol/tot/${t}#${i}-${o}`)})}_toggleColumnVisibility(t){t.visible=!t.visible;this._updateColumnVisibility()}_updateColumnVisibility(){const t={};for(const e of this._columns)t[e.id]=e.visible;this._dataGrid.setColumnsVisiblity(t)}_sortDataGrid(){const t=this._dataGrid.sortColumnId();if(!t)return;let e=true;switch(t){case"method":case"direction":e=false;break}const o=e?DataGrid.SortableDataGrid.NumericComparator:DataGrid.SortableDataGrid.StringComparator;this._dataGrid.sortNodes(o.bind(null,t),!this._dataGrid.isSortOrderAscending())}wasShown(){if(this._started)return;this._started=true;this._startTime=Date.now();this._setRecording(true)}_setRecording(t){if(t){Protocol.test.onMessageSent=this._messageSent.bind(this);Protocol.test.onMessageReceived=this._messageRecieved.bind(this)}else{Protocol.test.onMessageSent=null;Protocol.test.onMessageReceived=null}}_messageRecieved(t){if("id"in t){const e=this._nodeForId[t.id];if(!e)return;e.data.response=t.result||t.error;e.hasError=!!t.error;e.refresh();if(this._dataGrid.selectedNode===e)this._infoWidget.render(e.data);return}const e=new ProtocolMonitor.ProtocolMonitor.ProtocolNode({method:t.method,direction:"recieved",response:t.params,timestamp:Date.now()-this._startTime,request:""});this._nodes.push(e);if(this._filter(e))this._dataGrid.insertChild(e)}_messageSent(t){const e=new ProtocolMonitor.ProtocolMonitor.ProtocolNode({method:t.method,direction:"sent",request:t.params,timestamp:Date.now()-this._startTime,response:"(pending)",id:t.id});this._nodeForId[t.id]=e;this._nodes.push(e);if(this._filter(e))this._dataGrid.insertChild(e)}};ProtocolMonitor.ProtocolMonitor.ProtocolNode=class extends DataGrid.SortableDataGridNode{constructor(t){super(t);this.hasError=false}createCell(t){switch(t){case"response":if(!this.data[t]&&this.data.direction==="send"){const e=this.createTD(t);e.textContent="(pending)";return e}case"request":{const e=this.createTD(t);const o=SDK.RemoteObject.fromLocalObject(this.data[t]);e.textContent=o.description.trimEnd(50);e.classList.add("source-code");return e}case"timestamp":{const e=this.createTD(t);e.textContent=ls`${this.data[t]} ms`;return e}}return super.createCell(t)}element(){const t=super.element();t.classList.toggle("protocol-message-sent",this.data.direction==="sent");t.classList.toggle("protocol-message-recieved",this.data.direction!=="sent");t.classList.toggle("error",this.hasError);return t}};ProtocolMonitor.ProtocolMonitor.InfoWidget=class extends UI.VBox{constructor(){super();this._tabbedPane=new UI.TabbedPane;this._tabbedPane.appendTab("request","Request",new UI.Widget);this._tabbedPane.appendTab("response","Response",new UI.Widget);this._tabbedPane.show(this.contentElement);this._tabbedPane.selectTab("response");this.render(null)}render(t){const e=t&&t.direction==="sent";this._tabbedPane.setTabEnabled("request",!!e);if(!t){this._tabbedPane.changeTabView("request",new UI.EmptyWidget(ls`No message selected`));this._tabbedPane.changeTabView("response",new UI.EmptyWidget(ls`No message selected`));return}if(!e)this._tabbedPane.selectTab("response");this._tabbedPane.changeTabView("request",SourceFrame.JSONView.createViewSync(t.request));this._tabbedPane.changeTabView("response",SourceFrame.JSONView.createViewSync(t.response))}};Runtime.cachedResources["protocol_monitor/protocolMonitor.css"]=".data-grid {\n    border: none;\n}\n.data-grid {\n    flex: auto;\n    border: none;\n}\n\n.data-grid .data {\n    background-image: none;\n}\n\n.data-grid td {\n    /* border-bottom: 1px solid #ccc; */\n    border-left-color: #ccc;\n}\n\n.data-grid tr.selected {\n    background-color: #def;\n}\n\n.data-grid th {\n    border-left-color: #ccc;\n}\n\n.protocol-message-sent {\n    background-color: hsl(281, 64%, 95%);\n}\n\n.protocol-monitor-toolbar {\n    border-bottom:var(--divider-border);\n}\n\n.error {\n    background-color: hsl(0, 100%, 97%);\n    color: red;\n}";