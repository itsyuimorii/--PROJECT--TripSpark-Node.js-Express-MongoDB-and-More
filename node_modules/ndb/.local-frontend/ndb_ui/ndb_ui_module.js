self["NdbUi"]=self["NdbUi"]||{};Ndb.RunConfiguration=class extends UI.VBox{constructor(){super(true);this.registerRequiredCSS("ndb_ui/runConfiguration.css");this._items=new UI.ListModel;this._list=new UI.ListControl(this._items,this,UI.ListMode.NonViewport);this.contentElement.appendChild(this._list.element);this.update()}async update(){const e=[];const t=await Ndb.mainConfiguration();if(t)e.push(t);const n=await Ndb.backend.pkg();if(n){const t=n.scripts||{};this._items.replaceAll(e.concat(Object.keys(t).map(e=>({name:e,command:t[e],args:["run",e]}))))}}createElementForItem(e){const t=UI.Fragment.build`
    <div class=list-item>
      <div class=configuration-item>
        <div>${e.name}</div>
        <div class=configuration-command>${e.command}</div>
      </div>
      <div class='controls-container fill'>
        <div class=controls-gradient></div>
        <div $=controls-buttons class=controls-buttons></div>
      </div>
    </div>`;const n=t.$("controls-buttons");const i=new UI.Toolbar("",n);const s=new UI.ToolbarButton(Common.UIString("Run"),"largeicon-play");s.addEventListener(UI.ToolbarButton.Events.Click,this._runConfig.bind(this,e.execPath,e.args));i.appendToolbarItem(s);const o=new UI.ToolbarButton(Common.UIString("Start recording.."),"largeicon-start-recording");o.addEventListener(UI.ToolbarButton.Events.Click,this._profileConfig.bind(this,e.execPath,e.args));i.appendToolbarItem(o);return t.element()}async _runConfig(e,t){await Ndb.nodeProcessManager.debug(e||await Ndb.npmExecPath(),t)}async _profileConfig(e,t){await Ndb.nodeProcessManager.profile(e||await Ndb.npmExecPath(),t)}heightForItem(e){return 12}isItemSelectable(e){return false}selectedItemChanged(e,t,n,i){}};Ndb.NodeProcesses=class extends UI.VBox{constructor(){super(true);this.registerRequiredCSS("ndb_ui/nodeProcesses.css");const e=new UI.Toolbar("process-toolbar",this.contentElement);this._pauseAtStartCheckbox=new UI.ToolbarSettingCheckbox(Common.moduleSetting("pauseAtStart"));this._pauseAtStartCheckbox.element.id="pause-at-start-checkbox";e.appendToolbarItem(this._pauseAtStartCheckbox);this._emptyElement=this.contentElement.createChild("div","gray-info-message");this._emptyElement.id="no-running-nodes-msg";this._emptyElement.textContent=Common.UIString("No running nodes");this._treeOutline=new UI.TreeOutlineInShadow;this._treeOutline.registerRequiredCSS("ndb_ui/nodeProcesses.css");this.contentElement.appendChild(this._treeOutline.element);this._treeOutline.element.classList.add("hidden");this._targetToUI=new Map;SDK.targetManager.observeTargets(this)}targetAdded(e){if(e.id()==="<root>")return;if(e.name()==="repl")return;const t=UI.Fragment.build`
      <div class=process-item>
        <div class=process-title>${e.name()}</div>
        <div $=state class=process-item-state></div>
      </div>
      <div class='controls-container fill'>
        <div class=controls-gradient></div>
        <div $=controls-buttons class=controls-buttons></div>
      </div>
    `;const n=e.model(SDK.DebuggerModel);n.addEventListener(SDK.DebuggerModel.Events.DebuggerPaused,()=>{t.$("state").textContent="paused"});n.addEventListener(SDK.DebuggerModel.Events.DebuggerResumed,()=>{t.$("state").textContent="attached"});t.$("state").textContent=n.isPaused()?"paused":"attached";const i=t.$("controls-buttons");const s=new UI.Toolbar("",i);const o=new UI.ToolbarButton(Common.UIString("Kill"),"largeicon-terminate-execution");o.addEventListener(UI.ToolbarButton.Events.Click,t=>Ndb.nodeProcessManager.kill(e));s.appendToolbarItem(o);const r=new UI.TreeElement(t.element());r.onselect=(t=>{if(UI.context.flavor(SDK.Target)!==e)UI.context.setFlavor(SDK.Target,e)});const a=e.parentTarget();let l=this._treeOutline.rootElement();if(a){const e=this._targetToUI.get(a);if(e)l=e.treeElement}l.appendChild(r);l.expand();if(!this._targetToUI.size){this._emptyElement.classList.add("hidden");this._treeOutline.element.classList.remove("hidden")}this._targetToUI.set(e,{treeElement:r,f:t})}targetRemoved(e){const t=this._targetToUI.get(e);if(t){const n=t.treeElement.parent;for(const e of t.treeElement.children().slice()){t.treeElement.removeChild(e);n.appendChild(e)}n.removeChild(t.treeElement);this._targetToUI.delete(e)}if(!this._targetToUI.size){this._emptyElement.classList.remove("hidden");this._treeOutline.element.classList.add("hidden")}}_targetFlavorChanged({data:e}){const t=this._targetToUI.get(e);if(t)t.select()}};Terminal.applyAddon(fit);Ndb.Terminal=class extends UI.VBox{constructor(){super(true);this._init=false;this.registerRequiredCSS("xterm/dist/xterm.css");this.element.addEventListener("contextmenu",this._onContextMenu.bind(this));this._terminal=Ndb.Terminal._createTerminal();this._terminal.on("resize",this._sendResize.bind(this));this._terminal.on("data",this._sendData.bind(this));Ndb.nodeProcessManager.addEventListener(Ndb.NodeProcessManager.Events.TerminalData,this._terminalData,this)}static _createTerminal(){const e=new Terminal;let t;let n=11;if(Host.isMac()){t="Menlo, monospace"}else if(Host.isWin()){t="Consolas, Lucida Console, Courier New, monospace";n=12}else{t="dejavu sans mono, monospace"}e.setOption("fontFamily",t);e.setOption("fontSize",n);e.setOption("cursorStyle","bar");e.setOption("convertEol",true);return e}async _restartService(){if(this._backend)this._backend.dispose();const e=await Ndb.nodeProcessManager.env();this._anotherTerminalHint(e);this._backend=await Ndb.backend.createService("terminal.js",rpc.handle(this),e,this._terminal.cols,this._terminal.rows)}_anotherTerminalHint(e){this._terminal.writeln("# Want to use your own terminal? Copy paste following lines..");this._terminal.writeln("");this._terminal.writeln(Object.keys(e).map(t=>`export ${t}='${e[t]}'`).join("\n"));this._terminal.writeln("");this._terminal.writeln("# ..and after you can run any node program (e.g., npm run unit), ndb will detect it.");this._terminal.writeln("")}_onContextMenu(e){const t=this._terminal?this._terminal.getSelection():null;const n=new UI.ContextMenu(e);const i=n.defaultSection().appendItem(ls`Copy`,()=>navigator.clipboard.writeText(t));i.setEnabled(!!t);n.defaultSection().appendItem(ls`Paste`,async()=>{if(this._backend)this._backend.write(await navigator.clipboard.readText())});n.show()}async initFailed(e){this._terminal.write("# Builtin terminal is unvailable: "+e.replace(/\n/g,"\n#"));this._terminal.writeln("")}dataAdded(e){if(e.startsWith("Debugger listening on")||e.startsWith("Debugger attached.")||e.startsWith("Waiting for the debugger to disconnect..."))return;this._terminal.write(e)}closed(){this._restartService()}_sendResize(e){if(this._backend)this._backend.resize(e.cols,e.rows)}_sendData(e){if(this._backend)this._backend.write(e)}onResize(){this._terminal.fit()}_terminalData(e){this._terminal.write(e.data)}wasShown(){if(this._init)return;this._init=true;this._terminal.open(this.contentElement);this._restartService()}};Runtime.cachedResources["ndb_ui/runConfiguration.css"]='/**\n * @license Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n */\n\n.list-item {\n  flex: none;\n  min-height: 30px;\n  display: flex;\n  align-items: center;\n  position: relative;\n  overflow: hidden;\n  padding-bottom: 3px;\n}\n\n.list-item:hover {\n  background: hsl(0, 0%, 96%);\n}\n\n.list-item {\n  border-top: 1px solid #efefef;\n}\n\n.configuration-item {\n  padding: 3px 5px 3px 5px;\n  height: 30px;\n  align-items: center;\n  position: relative;\n  flex: auto 1 0;\n  width: 100%;\n}\n\n.configuration-command {\n  color: #888;\n  margin-left: auto;\n  padding: 0 10px 0 10px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.controls-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: stretch;\n  pointer-events: none;\n}\n\n.controls-gradient {\n    flex: 0 1 50px;\n}\n\n.list-item:hover .controls-gradient {\n  background-image: linear-gradient(90deg, transparent, hsl(0, 0%, 96%));\n}\n\n.controls-buttons {\n  flex: none;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  pointer-events: auto;\n  visibility: hidden;\n}\n\n.list-item:hover .controls-buttons {\n  background-color: hsl(0, 0%, 96%);\n  visibility: visible;\n}';Runtime.cachedResources["ndb_ui/nodeProcesses.css"]='/**\n * @license Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n */\n\n.process-toolbar {\n  background-color: var(--toolbar-bg-color);\n  border-bottom: var(--divider-border);\n}\n\n.tree-outline li {\n  min-height: 20px;\n}\n\n.tree-outline li::before {\n  display: none;\n}\n\n.process-item {\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.process-item-state {\n  color: #888;\n  margin-left: auto;\n  padding: 0 10px 0 10px;\n}\n\n.controls-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: stretch;\n  pointer-events: none;\n}\n\n.controls-gradient {\n    flex: 0 1 50px;\n}\n\nli:hover .controls-gradient {\n  background-image: linear-gradient(90deg, transparent, hsl(0, 0%, 96%));\n}\n\n.controls-buttons {\n  flex: none;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  pointer-events: auto;\n  visibility: hidden;\n}\n\nli:hover .controls-buttons {\n  background-color: hsl(0, 0%, 96%);\n  visibility: visible;\n}\n';