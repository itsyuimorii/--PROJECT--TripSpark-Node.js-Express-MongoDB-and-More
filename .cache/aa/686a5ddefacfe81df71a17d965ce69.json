{"id":"Kbjq","dependencies":[{"name":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js-Express-MongoDB-and-More/package.json","includedInParent":true,"mtime":1693965869000},{"name":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js-Express-MongoDB-and-More/node_modules/axios/package.json","includedInParent":true,"mtime":1694047176885}],"generated":{"js":"\"use strict\";function e(e){return function(t){return e.apply(null,t)}}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/axios/lib/helpers/spread.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/axios/lib/helpers/spread.js","original":{"line":24,"column":15},"generated":{"line":1,"column":13}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"spread","original":{"line":24,"column":24},"generated":{"line":1,"column":22}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"callback","original":{"line":24,"column":31},"generated":{"line":1,"column":24}},{"source":"../../node_modules/axios/lib/helpers/spread.js","original":{"line":25,"column":2},"generated":{"line":1,"column":27}},{"source":"../../node_modules/axios/lib/helpers/spread.js","original":{"line":25,"column":9},"generated":{"line":1,"column":34}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"arr","original":{"line":25,"column":23},"generated":{"line":1,"column":43}},{"source":"../../node_modules/axios/lib/helpers/spread.js","original":{"line":26,"column":4},"generated":{"line":1,"column":46}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"callback","original":{"line":26,"column":11},"generated":{"line":1,"column":53}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"apply","original":{"line":26,"column":20},"generated":{"line":1,"column":55}},{"source":"../../node_modules/axios/lib/helpers/spread.js","original":{"line":26,"column":26},"generated":{"line":1,"column":61}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"arr","original":{"line":26,"column":32},"generated":{"line":1,"column":66}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"Object","original":{"line":3,"column":0},"generated":{"line":1,"column":70}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"defineProperty","original":{"line":3,"column":0},"generated":{"line":1,"column":77}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"exports","original":{"line":3,"column":0},"generated":{"line":1,"column":92}},{"source":"../../node_modules/axios/lib/helpers/spread.js","original":{"line":3,"column":0},"generated":{"line":1,"column":100}},{"source":"../../node_modules/axios/lib/helpers/spread.js","original":{"line":3,"column":0},"generated":{"line":1,"column":113}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"value","original":{"line":3,"column":0},"generated":{"line":1,"column":114}},{"source":"../../node_modules/axios/lib/helpers/spread.js","original":{"line":3,"column":0},"generated":{"line":1,"column":121}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"exports","original":{"line":3,"column":0},"generated":{"line":1,"column":125}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"default","original":{"line":3,"column":0},"generated":{"line":1,"column":133}},{"source":"../../node_modules/axios/lib/helpers/spread.js","name":"spread","original":{"line":3,"column":0},"generated":{"line":1,"column":141}}],"sources":{"../../node_modules/axios/lib/helpers/spread.js":"'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n"},"lineCount":null}},"error":null,"hash":"06c32473022b6027ea5a3b66927dba66","cacheData":{"env":{}}}