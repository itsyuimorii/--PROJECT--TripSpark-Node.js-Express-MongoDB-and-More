{"id":"../../node_modules/core-js/internals/to-integer-or-infinity.js","dependencies":[{"name":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js-Express-MongoDB-and-More/package.json","includedInParent":true,"mtime":1693858376503},{"name":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js-Express-MongoDB-and-More/node_modules/core-js/package.json","includedInParent":true,"mtime":1693862145577},{"name":"../internals/math-trunc","loc":{"line":2,"column":20,"index":34},"parent":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js-Express-MongoDB-and-More/node_modules/core-js/internals/to-integer-or-infinity.js","resolved":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js-Express-MongoDB-and-More/node_modules/core-js/internals/math-trunc.js"}],"generated":{"js":"'use strict';\nvar trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}}],"sources":{"../../node_modules/core-js/internals/to-integer-or-infinity.js":"'use strict';\nvar trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n"},"lineCount":11}},"error":null,"hash":"d401df89de742393de854976bdca0aff","cacheData":{"env":{}}}