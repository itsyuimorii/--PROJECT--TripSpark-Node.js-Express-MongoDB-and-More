{"id":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","dependencies":[{"name":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js--Express--MongoDB---More--The-Complete-Bootcamp-2023/package.json","includedInParent":true,"mtime":1692653187005},{"name":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js--Express--MongoDB---More--The-Complete-Bootcamp-2023/node_modules/core-js/package.json","includedInParent":true,"mtime":1692652810485},{"name":"../internals/well-known-symbol","loc":{"line":2,"column":30,"index":44},"parent":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js--Express--MongoDB---More--The-Complete-Bootcamp-2023/node_modules/core-js/internals/correct-is-regexp-logic.js","resolved":"/Users/itsyuimoriispace/Documents/✶ GitHub/Node.js--Express--MongoDB---More--The-Complete-Bootcamp-2023/node_modules/core-js/internals/well-known-symbol.js"}],"generated":{"js":"'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (error1) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (error2) { /* empty */ }\n  } return false;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}}],"sources":{"../../node_modules/core-js/internals/correct-is-regexp-logic.js":"'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (error1) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (error2) { /* empty */ }\n  } return false;\n};\n"},"lineCount":17}},"error":null,"hash":"5cc1c34809e53235299a4d0b53cad011","cacheData":{"env":{}}}